Goal: Review - logic backend
Kich ban: Muc dich - ptich giai phap of author - tu trinh bay lai

------------------------------------------------ Back-End ------------------------------------------------

1/ Setup: MongoDB Atlas setup - Express - Connect MongoDB with mongoose - Router file --> Done

2/ JWT - User router - Auth router -> Done

3/ Profile route --> Done

4/ Post route

------------------------------------------------ Front-End ------------------------------------------------
First: Alert

---- User Authencation ----
1. Get info from User in Register comp and send it to API api/users to register user
    a. Connect Redux
    b. If err -> show in UI by Alert Redux
    c. Else -> send data to server and sign - return token to user by Auth Redux
DONE 1

2. Load User & Set Auth Token
Note: After register, one token will be send to client and set to LocalStogare - set it to req Header - load user with that token
todos:
a. setAuthToken
b. Action loadUser
c. reducer
d. after register and token
DONE

3. User Login
a. Get info from user (Login Comp) -> update to useState
b. When user submit -> exc Fn action login
c. Redirect if loggin success
DONE

4. Logout
a. Create type logout - action - reducer
b. Navbar Comp: destructor props - loading? - conditional rendering
DONE

---- Dashboard & Profile Management ----
1. Protect this route - purpose: khi nguoi dung truy cap Dashboard, neu chua dang nhap, Redirect user ve login page and continues neu da login. (PrivateRoute)
DONE

2. Redux (reducer - action) profile - Get current profile
Purpose: Sau khi login, token duoc luu trong LocalStogare - thao tac lay profile cua user nay
Logic: Sau khi login -> Redirect page Dashboard and exec action getCurrentProfile by useEfect, reducer with that action -> Return new state -> Render State into UI
Done

3. Starting On The Dashboard -> Render data to UI
Done

4. CreateProfile Component - Create Action
a. Prepare HTML - state - get value from UI and process
b. Action to create or update
Done

5.  Edit Profile
a. Get data of profile after user login and render UI
    Logic:
        a1. User login success -> Redirect Dashboard Comp
        a2. Check user have profile or not in conditional rendering in Dashboard Comp
        a3. If a2 ok -> useEfect(getCurrentProfile) to store data from server to state
        a4. Get state and render to EditProfie Comp.
b. Edit Profile
    Logic:
        b1. Get new info user and submit through from
        b2. Exec createProfile() in submit action
        b3. Logic with createProfile...
Done

6. Add Experience - education
a. Action - Redux
b. Component of that and use Action - redux

7. List Education & Experiences: Purpose -> Show data to UI
a. Create Experience and Education Component.
b. Add those Component to Dashboard.js and pass props data
c. Those comp use props as data and process to render to UI

8. Delete Education, Experiences & Account - Post of acc which is login
a. Action in profile - Reducer in profile
b. dispatch in Experience, Education, Dashboard comp

---- Profile Display ----
1. Get all profile
2. Addressing The Console Warnings
3. Display profile Detail: 
    a. Action - Reducer getProfilesById
    b. process data - render UI
4. ProfileTop & ProfileAbout Components
5. Profile Experience & Education Display

---- Posts & Comments ----
1. Post Reducer, Action & Initial Component
    a. Reducer post - action post -> Component Post

2. Post Item Component

3. Like & Unlike Functionality

4. Del - Add Post
    a. Action - Reducer -> finally component
    
5. Display single post
    a. action - reducer - component

6. Add comments
    Action - reducer - component CommentForm

7. Display and Delete comments

-----




